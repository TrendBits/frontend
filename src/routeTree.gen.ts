/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthAuthRouteImport } from './routes/auth/_auth'
import { Route as ProtectedAuthRouteImport } from './routes/_protected/_auth'
import { Route as AuthRequestPasswordVerifyRouteImport } from './routes/auth/request-password/verify'
import { Route as AuthRequestPasswordResetRouteImport } from './routes/auth/request-password/reset'
import { Route as AuthAuthRegisterRouteImport } from './routes/auth/_auth.register'
import { Route as AuthAuthLoginRouteImport } from './routes/auth/_auth.login'
import { Route as ProtectedAuthPromptRouteImport } from './routes/_protected/_auth.prompt'
import { Route as ProtectedAuthHistoryIndexRouteImport } from './routes/_protected/_auth.history/index'
import { Route as ProtectedAuthHistorySummary_idRouteImport } from './routes/_protected/_auth.history/$summary_id'

const AuthRouteImport = createFileRoute('/auth')()

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAuthRoute = AuthAuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => AuthRoute,
} as any)
const ProtectedAuthRoute = ProtectedAuthRouteImport.update({
  id: '/_protected/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRequestPasswordVerifyRoute =
  AuthRequestPasswordVerifyRouteImport.update({
    id: '/request-password/verify',
    path: '/request-password/verify',
    getParentRoute: () => AuthRoute,
  } as any)
const AuthRequestPasswordResetRoute =
  AuthRequestPasswordResetRouteImport.update({
    id: '/request-password/reset',
    path: '/request-password/reset',
    getParentRoute: () => AuthRoute,
  } as any)
const AuthAuthRegisterRoute = AuthAuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthAuthRoute,
} as any)
const AuthAuthLoginRoute = AuthAuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthAuthRoute,
} as any)
const ProtectedAuthPromptRoute = ProtectedAuthPromptRouteImport.update({
  id: '/prompt',
  path: '/prompt',
  getParentRoute: () => ProtectedAuthRoute,
} as any)
const ProtectedAuthHistoryIndexRoute =
  ProtectedAuthHistoryIndexRouteImport.update({
    id: '/history/',
    path: '/history/',
    getParentRoute: () => ProtectedAuthRoute,
  } as any)
const ProtectedAuthHistorySummary_idRoute =
  ProtectedAuthHistorySummary_idRouteImport.update({
    id: '/history/$summary_id',
    path: '/history/$summary_id',
    getParentRoute: () => ProtectedAuthRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthAuthRouteWithChildren
  '/prompt': typeof ProtectedAuthPromptRoute
  '/auth/login': typeof AuthAuthLoginRoute
  '/auth/register': typeof AuthAuthRegisterRoute
  '/auth/request-password/reset': typeof AuthRequestPasswordResetRoute
  '/auth/request-password/verify': typeof AuthRequestPasswordVerifyRoute
  '/history/$summary_id': typeof ProtectedAuthHistorySummary_idRoute
  '/history': typeof ProtectedAuthHistoryIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthAuthRouteWithChildren
  '/prompt': typeof ProtectedAuthPromptRoute
  '/auth/login': typeof AuthAuthLoginRoute
  '/auth/register': typeof AuthAuthRegisterRoute
  '/auth/request-password/reset': typeof AuthRequestPasswordResetRoute
  '/auth/request-password/verify': typeof AuthRequestPasswordVerifyRoute
  '/history/$summary_id': typeof ProtectedAuthHistorySummary_idRoute
  '/history': typeof ProtectedAuthHistoryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected/_auth': typeof ProtectedAuthRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/auth/_auth': typeof AuthAuthRouteWithChildren
  '/_protected/_auth/prompt': typeof ProtectedAuthPromptRoute
  '/auth/_auth/login': typeof AuthAuthLoginRoute
  '/auth/_auth/register': typeof AuthAuthRegisterRoute
  '/auth/request-password/reset': typeof AuthRequestPasswordResetRoute
  '/auth/request-password/verify': typeof AuthRequestPasswordVerifyRoute
  '/_protected/_auth/history/$summary_id': typeof ProtectedAuthHistorySummary_idRoute
  '/_protected/_auth/history/': typeof ProtectedAuthHistoryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/prompt'
    | '/auth/login'
    | '/auth/register'
    | '/auth/request-password/reset'
    | '/auth/request-password/verify'
    | '/history/$summary_id'
    | '/history'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/prompt'
    | '/auth/login'
    | '/auth/register'
    | '/auth/request-password/reset'
    | '/auth/request-password/verify'
    | '/history/$summary_id'
    | '/history'
  id:
    | '__root__'
    | '/'
    | '/_protected/_auth'
    | '/auth'
    | '/auth/_auth'
    | '/_protected/_auth/prompt'
    | '/auth/_auth/login'
    | '/auth/_auth/register'
    | '/auth/request-password/reset'
    | '/auth/request-password/verify'
    | '/_protected/_auth/history/$summary_id'
    | '/_protected/_auth/history/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedAuthRoute: typeof ProtectedAuthRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/_auth': {
      id: '/auth/_auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthAuthRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_protected/_auth': {
      id: '/_protected/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/request-password/verify': {
      id: '/auth/request-password/verify'
      path: '/request-password/verify'
      fullPath: '/auth/request-password/verify'
      preLoaderRoute: typeof AuthRequestPasswordVerifyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/request-password/reset': {
      id: '/auth/request-password/reset'
      path: '/request-password/reset'
      fullPath: '/auth/request-password/reset'
      preLoaderRoute: typeof AuthRequestPasswordResetRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/_auth/register': {
      id: '/auth/_auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthAuthRegisterRouteImport
      parentRoute: typeof AuthAuthRoute
    }
    '/auth/_auth/login': {
      id: '/auth/_auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthAuthLoginRouteImport
      parentRoute: typeof AuthAuthRoute
    }
    '/_protected/_auth/prompt': {
      id: '/_protected/_auth/prompt'
      path: '/prompt'
      fullPath: '/prompt'
      preLoaderRoute: typeof ProtectedAuthPromptRouteImport
      parentRoute: typeof ProtectedAuthRoute
    }
    '/_protected/_auth/history/': {
      id: '/_protected/_auth/history/'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof ProtectedAuthHistoryIndexRouteImport
      parentRoute: typeof ProtectedAuthRoute
    }
    '/_protected/_auth/history/$summary_id': {
      id: '/_protected/_auth/history/$summary_id'
      path: '/history/$summary_id'
      fullPath: '/history/$summary_id'
      preLoaderRoute: typeof ProtectedAuthHistorySummary_idRouteImport
      parentRoute: typeof ProtectedAuthRoute
    }
  }
}

interface ProtectedAuthRouteChildren {
  ProtectedAuthPromptRoute: typeof ProtectedAuthPromptRoute
  ProtectedAuthHistorySummary_idRoute: typeof ProtectedAuthHistorySummary_idRoute
  ProtectedAuthHistoryIndexRoute: typeof ProtectedAuthHistoryIndexRoute
}

const ProtectedAuthRouteChildren: ProtectedAuthRouteChildren = {
  ProtectedAuthPromptRoute: ProtectedAuthPromptRoute,
  ProtectedAuthHistorySummary_idRoute: ProtectedAuthHistorySummary_idRoute,
  ProtectedAuthHistoryIndexRoute: ProtectedAuthHistoryIndexRoute,
}

const ProtectedAuthRouteWithChildren = ProtectedAuthRoute._addFileChildren(
  ProtectedAuthRouteChildren,
)

interface AuthAuthRouteChildren {
  AuthAuthLoginRoute: typeof AuthAuthLoginRoute
  AuthAuthRegisterRoute: typeof AuthAuthRegisterRoute
}

const AuthAuthRouteChildren: AuthAuthRouteChildren = {
  AuthAuthLoginRoute: AuthAuthLoginRoute,
  AuthAuthRegisterRoute: AuthAuthRegisterRoute,
}

const AuthAuthRouteWithChildren = AuthAuthRoute._addFileChildren(
  AuthAuthRouteChildren,
)

interface AuthRouteChildren {
  AuthAuthRoute: typeof AuthAuthRouteWithChildren
  AuthRequestPasswordResetRoute: typeof AuthRequestPasswordResetRoute
  AuthRequestPasswordVerifyRoute: typeof AuthRequestPasswordVerifyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAuthRoute: AuthAuthRouteWithChildren,
  AuthRequestPasswordResetRoute: AuthRequestPasswordResetRoute,
  AuthRequestPasswordVerifyRoute: AuthRequestPasswordVerifyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedAuthRoute: ProtectedAuthRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
